#version 450

precision highp uimage3D;

layout(local_size_x = 64) in;

layout(location = 7) uniform uint currentLevel;

layout(binding = 3, r32ui) uniform highp uimage3D voxelData;
layout(binding = 4, r32ui) uniform highp uimage3D voxelDataNextLevel;

struct SceneParams {
	mat4 MTOmatrix[3];
	mat4 MTWmatrix;
	mat4 MTShadowMatrix;
	vec3 lightDir;
	uint voxelDraw;
	uint view;
	uint voxelRes;
	uint voxelLayer;
	uint numMipLevels;
	uint mipLevel;
};

layout (std140, binding = 1) uniform SceneBuffer {
	SceneParams scene;
};

struct DrawElementsIndirectCommand {
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint baseVertex;
	uint baseInstance;
};

layout(std430, binding = 0) buffer DrawCmdBuffer {
	DrawElementsIndirectCommand drawCmd[10];
};

struct ComputeIndirectCommand {
	uint workGroupSizeX;
	uint workGroupSizeY;
	uint workGroupSizeZ;
};

layout(std430, binding = 1) buffer ComputeCmdBuffer {
	ComputeIndirectCommand compCmd[10];
};

layout(std430, binding = 2) buffer SparseBuffer {
	uint sparseList[];
};

struct VoxelData {
	vec4 color;
	uint light;
	uint count;
};

VoxelData unpackARGB8(uint bytesIn) {
	VoxelData data;
	uvec3 uiColor;


	data.light = (bytesIn & uint(0xF0000000)) >> 28;
	data.count = (bytesIn & uint(0x0F000000)) >> 24;
	uiColor.r =  (bytesIn & uint(0x00FF0000)) >> 16;
	uiColor.g =  (bytesIn & uint(0x0000FF00)) >> 8;
	uiColor.b =  (bytesIn & uint(0x000000FF));

	data.color.rgb = vec3(uiColor) / float(data.count) / 31.0f;
	data.color.a = 1.0f;

	return data;
}

uint packARGB8(VoxelData dataIn) {
	uint result = uint(0);

	uvec3 uiColor = uvec3(dataIn.color.rgb * 31.0f * float(dataIn.count));

	result |= (dataIn.light & uint(0xF)) << 28;
	result |= (dataIn.count & uint(0xF)) << 24;
	result |= (uiColor.r & uint(0xFF)) << 16;
	result |= (uiColor.g & uint(0xFF)) << 8;
	result |= (uiColor.b & uint(0xFF));

	return result;
}

uint packRG11B10(uvec3 dataIn) {
	uint result = uint(0);

	result |= (dataIn.r & uint(0x7FF)) << 21;
	result |= (dataIn.g & uint(0x7FF)) << 10;
	result |= (dataIn.b & uint(0x3FF));

	return result;
}

uvec3 unpackRG11B10(uint bytesIn) {
	uvec3 outVec;

	outVec.r = (bytesIn & uint(0xFFE00000)) >> 21;
	outVec.g = (bytesIn & uint(0x001FFC00)) >> 10;
	outVec.b = (bytesIn & uint(0x000003FF));

	return outVec;
}

void main(void)
{	
	uint currentVoxel = gl_GlobalInvocationID.x;
	uint voxelCount = drawCmd[currentLevel].instanceCount;

	if(currentVoxel < voxelCount) {
		uint currentOffset = drawCmd[currentLevel].baseInstance;
		uint voxelPos = currentVoxel + currentOffset;
		uvec3 voxelCoord = unpackRG11B10(sparseList[voxelPos]);

		VoxelData data = unpackARGB8(imageLoad(voxelData, ivec3(voxelCoord)).r);
		
		data.light = (data.light > (data.count >> 1)) ? uint(1) : uint(0);

		data.count = uint(1); // reset 

		uint nextLevel = currentLevel + uint(1);
		uint nextOffset = drawCmd[nextLevel].baseInstance;
		uvec3 nextVoxelCoord = voxelCoord >> 1;

		uint prevData = imageAtomicAdd(voxelDataNextLevel, ivec3(nextVoxelCoord), packARGB8(data));

		if(prevData == uint(0)) {
			uint nextIndex = atomicAdd(drawCmd[nextLevel].instanceCount, uint(1));


			uint compWorkGroups = ((nextIndex + uint(1)) >> 6) + uint(1); // 6 = log2(workGroupSize = 64)
			atomicMax(compCmd[nextLevel].workGroupSizeX, compWorkGroups);


			sparseList[nextIndex + nextOffset] = packRG11B10(uvec3(nextVoxelCoord));
		}
	}
}

